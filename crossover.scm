(define (make-1p-crossover-operator)
  (lambda (ind1 ind2)
    (let* ((len (length ind1))
          (crossover-point (random (add1 len))))
      (define (cross-individuals bits1 bits2 pos acc)
        (if (zero? pos)
            (reverse acc)
            (cross-individuals (rest bits1) (rest bits2) (sub1 pos)
                               (cons (if (<= pos crossover-point) (first bits1) (first bits2)) acc))))
      (list (cross-individuals ind1 ind2 len '())
            (cross-individuals ind2 ind1 len '())))))

(define (make-crossover-operator points-count)
  (lambda (ind1 ind2)
    (let* ((len (length ind1))
           (points (let loop ((count points-count)
                              (minimum 0)
                              (allow-last #f)
                              (acc '()))
                     (if (zero? count)
                         acc
                         (let* ((maximum (random (if allow-last (add1 len) len)))
                                (width (- maximum minimum))
                                (new-point (+ minimum (add1 (random (if (zero? width) 1 width))))))
                           (if (= new-point len)
                               acc
                               (loop (sub1 count)
                                     new-point
                                     (if allow-last #t (zero? (random 2)))
                                     (cons new-point acc))))))))
      (define (cross-individuals bits1 bits2 pos points acc)
        (if (zero? pos)
            (reverse acc)
            (if (and (not (null? points)) (= pos (first points)))
                (cross-individuals bits2 bits1 pos (rest points) acc)
                (cross-individuals (rest bits1) (rest bits2) (sub1 pos) points (cons (first bits1) acc)))))
      (list (cross-individuals ind1 ind2 len points '())
            (cross-individuals ind2 ind1 len points '())))))
