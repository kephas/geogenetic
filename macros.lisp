(defmacro with-functions (names &body body)
  `(labels (,@(mapcar (lambda (name-spec)
                        (if (consp name-spec)
                            `(,(car name-spec) (&rest rest) (apply ,(cadr name-spec) rest))
                            `(,name-spec (&rest rest) (apply ,name-spec rest))))
                      names))
     ,@body))

(defmacro named-let (name binds &body body)
  `(labels ((,name ,(mapcar #'first binds) ,@body))
     (,name ,@(mapcar #'second binds))))
