(define (average numbers)
  (if (null? numbers)
      0
      (let loop ((numbers numbers)
                 (sum 0)
                 (count 0))
        (if (null? numbers)
            (/ sum count)
            (loop (rest numbers) (+ sum (first numbers)) (add1 count))))))

(define (average-score population score)
  (average (map score population)))

(define (stochastic-universal-sampling population score precision)
  (let* ((count (length population))
         (max (apply + (map score population)))
         (interval (/ max count))
         (start (/ (* (random precision) interval) precision)))
    (let sample ((population population)
                 (count count)
                 (pos start)
                 (sum-of-previous-scores 0)
                 (sampling '()))
      (if (zero? count)
          sampling
          (let ((adjusted-score (+ sum-of-previous-scores (score (first population)))))
            (if (<= pos adjusted-score)
                (sample population (sub1 count) (+ pos interval) sum-of-previous-scores (cons (first population) sampling))
                (sample (rest population) count pos adjusted-score sampling)))))))
