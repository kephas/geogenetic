(in-package :thierry-technologies.com/2010/06/gene-gcs)

(defvar %sys)
(defvar %constraints)

(defun read-test (file)
  (let ((data (cdar (read-definitions-files file *euclidian-base*))))
    (setf %sys (first data)
	  %constraints (second data))))

(defvar %genes->gcs)
(defvar %gcs->genes)

(defun test-evolution (integer-size system number)
  (let ((size (gcs-genome-length integer-size system)))
    (setf %genes->gcs (lambda (genotype)
			(phenotype->gcs %sys (genotype->phenotype 16 %sys genotype )))
	  %gcs->genes (lambda (gcs)
			(genotype->phenotype 16 %sys (gcs->phenotype gcs))))
    (repeat-n (lambda (pop)
		(evolve pop (make-stochastic-pareto-selection %constraints)
			(make-point-based-crossover size (make-1point-source size))
			(make-probabilistic-mutation-operator size .01)
			%gcs->genes %genes->gcs))
	      number (mapcar %genes->gcs (iter (repeat 100)
					       (collect (random (expt 2 size))))))))
